# Rozendoxxxxxxxxxxxxxxxxxxxx

import sqlite3


# -----------------------------------------------------------------
# CRIANDO AS TABELAS SQL

# $TABELA SEGUNDA FEIRA
# conn.execute('''CREATE TABLE SEGUNDA
#            (id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO1 INT NOT NULL,
#            MATERIA1 TEXT NOT NULL,
#            HORARIO2 INT NOT NULL,
#            MATERIA2 INT NOT NULL);''')

# $TABELA TERCA FEIRA
# conn.execute(''' CREATE TABLE TERCA
#            ( id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO1 INT NOT NULL,
#            MATERIA1 TEXT NOT NULL,
#            HORARIO2 INT NOT NULL,
#            MATERIA2 INT NOT NULL);''')

# $TABELA QUARTA FEIRA
# conn.execute(''' CREATE TABLE QUARTA
#            (id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO1 INTEGER NOT NULL,
#            MATERIA1 TEXT NOT NULL,
#            HORARIO2 INTEGER NOT NULL,
#            MATERIA2 TEXT NOT NULL);''')

# $TABELA QUINTA FEIRA
# conn.execute(''' CREATE TABLE QUINTA
#            (id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO1 INTEGER NOT NULL,
#           MATERIA1 TEXT NOT NULL,
#            HORARIO2 INTEGER NOT NULL,
#            MATERIA2 TEXT NOT NULL); ''')

# $TABELA SEXTA FEIRA
# conn.execute(''' CREATE TABLE SEXTA
#            (id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO1 INTEGER NOT NULL,
#            MATERIA1 TEXT NOT NULL,
#            HORARIO2 INTEGER NOT NULL,
#            MATERIA2 TEXT NOT NULL);''')

# $TABELA SABADO
# conn.execute(''' CREATE TABLE SABADO
#            (id INTEGER PRIMARY KEY AUTOINCREMENT,
#            HORARIO INTEGER NOT NULL,
#            MATERIA1 TEXT NOT NULL,
#            HORARIO2 INTEGER NOT NULL,
#            MATERIA2 TEXT NOT NULL);''')


# -----------------------------------------------------------------

# VER AGENDA:

def verSEG():
    try:
        connverseg = sqlite3.connect('AGENDA.db')

        # Criar um cursor
        cur = connverseg.cursor()

        # Executar o SELECT
        cur.execute("SELECT * FROM SEGUNDA")

        # Obter todos os resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        # Fechar o cursor e a conexão
        cur.close()
        connverseg.close()

        # Retornar mensagem de sucesso
        return "Operação ver Segunda-Feira bem-sucedida"
    except Exception as e:
        # Retornar mensagem de erro
        return "Operação ver Segunda-Feira não-sucedida. Erro: {}".format(e)


def verTER():
    try:
        connverter = sqlite3.connect('AGENDA.db')

        # Criar um cursor
        cur = connverter.cursor()

        # Executar o SELECT
        cur.execute("SELECT * FROM TERCA")

        # Obter todos os resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        # Fechar o cursor e a conexão
        cur.close()
        connverter.close()
        return "Operação bem sucedida."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def verQUA():
    try:
        connverseg = sqlite3.connect('AGENDATESTE.db')

        # Criar um cursor
        cur = connverseg.cursor()

        # Executar o SELECT
        cur.execute("SELECT * FROM QUARTA")

        # Obter todos os resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        # Fechar o cursor e a conexão
        cur.close()
        connverseg.close()
        return "Operação bem sucedida."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def verQUI():
    try:
        connverqui = sqlite3.connect('AGENDA.DB')

        # Criar um cursor
        cur = connverqui.cursor()

        # Obter todos os Resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        cur.close()
        connverqui.close()
        return "Operação bem sucedida."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def verSex():
    try:
        connversex = sqlite3.connect('AGENDA.DB')

        # Criar um cursor
        cur = connversex.cursor()

        # Obter todos os resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        cur.close()
        connversex.close()
        return "Operação bem sucedida."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def verSAB():
    try:
        connversab = sqlite3.connect('AGENDA.DB')

        # Criar um cursor
        cur = connversab.cursor()

        # Obter todos os resultados
        resultados = cur.fetchall()

        # Percorrer os resultados e imprimir cada linha
        for linha in resultados:
            print(linha)

        cur.close()
        connversab.close()
        return "Operação bem sucedida."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -----------------------------------------------------------------
# PARTE DO CODIGO PARA DAR UPDATE NAS TABELAS DE TODAS AS INFORMAÇÕES


def updateSEG():
    try:
        connseg = sqlite3.connect('AGENDA.db')
        cursor = connseg.cursor()

        nv_m1, nv_h1, nv_m2, nv_h2 = input("Digite o novo valor para {}: ".format("MATERIA1")), input(
            "Digite o novo valor para {}: ".format("HORARIO1")), input(
            "Digite o novo valor para {}: ".format("MATERIA2")), input(
            "Digite o novo valor para {}: ".format("HORARIO2"))

        # Atualiza a tabela segunda feira
        cursor.execute("UPDATE SEGUNDA SET MATERIA1 = ?, MATERIA2 = ?, MATERIA3 = ?, MATERIA4 = ?",
                       (nv_m1, nv_h1, nv_m2, nv_h2))

        # Salva as alterações
        connseg.commit()

        # Fecha a conexão com o banco de dados
        connseg.close()

        print("OPERAÇÃO BEM SUCEDIDA, UPDATE NA TABELA SEGUNDA FEIRA, FINALIZADA SEM ERROS")
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"

    # Retorna ao menu principal após a atualização
    menu_principal()


def updateTER():
    try:
        connter = sqlite3.connect('AGENDA.db')
        cursor = connter.cursor()

        # Solicita o novo valor para a coluna "MATERIA1"
        nv_m1 = input("Digite o novo valor para MATERIA1: ")
        # Solicita o novo valor para a coluna "HORARIO1"
        nv_h1 = input("Digite o novo valor para HORARIO1")
        # Solicita o novo valor para a coluna "MATERIA2"
        nv_m2 = input("Digite o novo valor para MATERIA2: ")
        # Solicita o novo valor para a coluna "HORARIO2"
        nv_h2 = input("Digite o novo valor para HORARIO2")

        # Atualiza as colunas de todos os registros da tabela "TERCA"
        cursor.execute("UPDATE TERCA SET MATERIA1 = ? ", (nv_m1,))
        cursor.execute("UPDATE TERCA SET HORAIO1 = ? ", (nv_h1,))
        cursor.execute("UPDATE TERCA SET MATERIA2 = ? ", (nv_m2,))
        cursor.execute("UPDATE TERCA SET HORARIO2 = ? ", (nv_h2,))

        # Salva as alterações
        connter.commit()

        # Fecha a conexão com o banco de dados
        connter.close()

        return "OPERAÇÃO BEM SUCEDIDA,UPDATE NA TERCA FEIRA FINALIZADA SEM ERROS."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def updateQUA():
    try:

        connqua = sqlite3.connect('AGENDA.db')
        cursor = connqua.cursor()

        # Solicita o novo valor para a coluna "MATERIA1"
        nv_m1 = input("Digite o novo valor para MATERIA1: ")
        # Solicita o novo valor para a coluna "HORARIO1"
        nv_h1 = input("Digite o novo valor para HORARIO1")
        # Solicita o novo valor para a coluna "MATERIA2"
        nv_m2 = input("Digite o novo valor para MATERIA2: ")
        # Solicita o novo valor para a coluna "HORARIO2"
        nv_h2 = input("Digite o novo valor para HORARIO2")

        # Atualiza as colunas de todos os registros da tabela "QUARTA"
        cursor.execute("UPDATE QUARTA SET MATERIA1 = ? ", (nv_m1,))
        cursor.execute("UPDATE QUARTA SET HORARIO1 = ? ", (nv_h1,))
        cursor.execute("UPDATE QUARTA SET MATERIA2 = ? ", (nv_m2,))
        cursor.execute("UPDATE QUARTA SET HORARIO2 = ? ", (nv_h2,))

        # Salva as alterações
        connqua.commit()

        # Fecha a conexão com o banco de dados
        connqua.close()
        return "OPERAÇÃO BEM SUCEDIDA, UPDATE REALIZADO NA TABELA QUARTA FEIRA."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def updateQUI():
    try:
        connqui = sqlite3.connect('AGENDA.db')
        cursor = connqui.cursor()

        # Solicita o novo valor para a coluna "MATERIA1"
        nv_m1 = input("Digite o novo valor para MATERIA1: ")
        # Solicita o novo valor para a coluna "HORARIO1"
        nv_h1 = input("Digite o novo valor para HORARIO1")
        # Solicita o novo valor para a coluna "MATERIA2"
        nv_m2 = input("Digite o novo valor para MATERIA2: ")
        # Solicita o novo valor para a coluna "HORARIO2"
        nv_h2 = input("Digite o novo valor para HORARIO2")

        # Atualiza as colunas de todos os registros da tabela "QUARTA"
        cursor.execute("UPDATE QUARTA SET MATERIA1 = ? ", (nv_m1,))
        cursor.execute("UPDATE QUARTA SET HORARIO1 = ? ", (nv_h1,))
        cursor.execute("UPDATE QUARTA SET MATERIA2 = ? ", (nv_m2,))
        cursor.execute("UPDATE QUARTA SET HORARIO2 = ? ", (nv_h2,))

        # Salva as alterações
        connqui.commit()

        # Fecha a conexão com o banco de dados
        connqui.close()
        return "OPERAÇÃO BEM SUCEDIDA, UPDATE RALIZADO NA TABELA QUINTA FEIRA"
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def updateSEX():
    try:
        connsex = sqlite3.connect('AGENDA.db')
        cursor = connsex.cursor()

        # Solicita o novo valor para a coluna "MATERIA1"
        nv_m1 = input("Digite o novo valor para MATERIA1: ")
        # Solicita o novo valor para a coluna "HORARIO1"
        nv_h1 = input("Digite o novo valor para HORARIO1")
        # Solicita o novo valor para a coluna "MATERIA2"
        nv_m2 = input("Digite o novo valor para MATERIA2: ")
        # Solicita o novo valor para a coluna "HORARIO2"
        nv_h2 = input("Digite o novo valor para HORARIO2")

        # Atualiza as colunas de todos os registros da tabela "SEXTA"
        cursor.execute("UPDATE QUARTA SET MATERIA1 = ? ", (nv_m1,))
        cursor.execute("UPDATE QUARTA SET HORARIO1 = ? ", (nv_h1,))
        cursor.execute("UPDATE QUARTA SET MATERIA2 = ? ", (nv_m2,))
        cursor.execute("UPDATE QUARTA SET HORARIO2 = ? ", (nv_h2,))

        # Salva as alterações
        connsex.commit()

        # Fecha a conexão com o banco de dados
        connsex.close()
        return "OPERAÇÃO SUCEDIDA, UPDATE REALIZADO NA TABELA QUARTAFEIRA"
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def updateSAB():
    try:
        connsab = sqlite3.connect('AGENDA.db')
        cursor = connsab.cursor()

        # Solicita o novo valor para a coluna "MATERIA1"
        nv_m1 = input("Digite o novo valor para MATERIA1: ")
        nv_h1 = input("Digite o novo valor para HORARIO1")
        nv_m2 = input("Digite o novo valor para MATERIA2: ")
        nv_h2 = input("Digite o novo valor para HORARIO2")

        # Atualiza a coluna "MATERIA1" de todos os registros da tabela "SABADO"
        cursor.execute("UPDATE SABADO SET MATERIA1 = ? ", (nv_m1,))
        cursor.execute("UPDATE SABADO SET HORARIO1 = ? ", (nv_h1,))
        cursor.execute("UPDATE SABADO SET MATERIA1 = ? ", (nv_m2,))
        cursor.execute("UPDATE SABADO SET HORARIO2 = ? ", (nv_h2,))

        # Salva as alterações
        connsab.commit()

        # Fecha a conexão com o banco de dados
        connsab.close()
        return "OPERAÇÃO BEM SUCEDIDA, TABELA ATUALIZADA"
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# ------------------------------------------------------------------
# PARTE DO CODIGO DE FUNÇÕES PARA DELETAR OS DADOS DAS TABELAS

def deletSEG():
    try:
        conndelseg = sqlite3.connect('AGENDA.DB')
        cursor = conndelseg.cursor()

        # EXCLUI TODOS OS DADOS DA TABELA SEGUNDA
        cursor.execute("DELETE FROM SEGUNDA;")

        # SALVA AS ALTERAÇÕES
        conndelseg.commit()

        # FECHA A CONEXÃO COM O BANCO DE DADOS
        conndelseg.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA SEGUNDA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def deletTER():
    try:
        conndelter = sqlite3.connect('AGENDA.DB')
        cursor = conndelter.cursor()

        # EXCLUI TODOS OS DADOS DA TABELA TERÇA
        cursor.execute("DELETE FROM TERCA;")

        # SALVA AS ALTERAÇÕES
        conndelter.commit()

        # FECHA A CONEXÃO COM O BANCO DE DADOS
        conndelter.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA TERÇA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def deletQUA():
    try:
        conndelqua = sqlite3.connect('AGENDA.DB')
        cursor = conndelqua.cursor()

        cursor.execute("DELETE FROM QUA;")

        conndelqua.commit()

        conndelqua.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA QUARTA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def deletQUI():
    try:
        conndelqui = sqlite3.connect('AGENDA.DB')
        cursor = conndelqui.cursor()

        cursor.execute("DELETE FROM QUI;")

        conndelqui.commit()

        conndelqui.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA QUINTA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def deletSEX():
    try:
        conndelsex = sqlite3.connect('AGENDA.DB')
        cursor = conndelsex.cursor()

        cursor.execute("DELETE FROM SEX;")

        conndelsex.commit()

        conndelsex.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA SEXTA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def deletSAB():
    try:
        conndelsab = sqlite3.connect('AGENDA.DB')
        cursor = conndelsab.cursor()

        cursor.execute("DELETE FROM SAB;")

        conndelsab.commit()

        conndelsab.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA SABADO APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -------------------------------------------------------------------
# ADICIONAR COLUNA ÀS COLUNAS

# noinspection PyGlobalUndefined
def adicionarCol():
    try:
        connadd = sqlite3.connect('AGENDA.DB')
        cursor = connadd.cursor()

        tabela = input("DIGITE O NOME DA TABELA")
        tabela_upper = tabela.upper()
        coluna = input("DIGITE O NOME DA COLUNA")

        tipo_dado = input("DIGITE O TIPO DE DADO DA COLUNA:")

        # concatena as informações na string da consulta SQL
        sql_query = f"ALTER TABLE{tabela_upper}ADD COLUMN {coluna} {tipo_dado}"

        cursor.execute(sql_query)

        connadd.commit()

        connadd.close()
        return "OPERAÇÃO BEM SUCEDIDA, COLUNA ADICIONADA COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -------------------------------------------------------------------
# DELETAR ESPECIFICAMENTE UMA COLUNA

def apagar_coluna():
    try:
        connapgcol = sqlite3.connect('AGENDA.DB')
        cursor = connapgcol.cursor()

        tabeladc = input("DIGITE O NOME DA TABELA:")
        colunadc = input("DIGITE O NOME DA COLUNA A SER EXCLUÍDA:")

        sql_query = f"ALTER TABLE {tabeladc} DROP COLUMN {colunadc}"

        cursor.execute(sql_query)

        connapgcol.commit()

        connapgcol.close()
        return "OPERAÇÃO BEM SUCEDIDA, DADOS DA TABELA QUARTA APAGADOS COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -------------------------------------------------------------------
# ADICIONAR TABELAS NO BDD


def add_tabble():
    try:
        connaddtable = sqlite3.connect('AGENDA.DB')
        cursor = connaddtable.cursor()

        # SOLICITA O NOVO NOME DA TABELA QUE IREMOS CRIAR
        nome_tabela = str(input("INFORME O NOME DA NOVA TABELA"))

        # CRIA UMA STRING DE CONSULTA SQL PARA CRIAR UMA NOVA TABELA, COM AS COLUNAS QUE JA EXISTEM NAS OUTRAS TABELAS
        sql_query = f"CREATE TABLE {nome_tabela} (" \
                    f"ID INTEGER PRIMARY KET AUTOINCREMENT MATERIA1 TEXT, HORARIO1 TEXT, MATERIA2 TEXT, HORARIO2 TEXT)"
        cursor.execute(sql_query)

        connaddtable.commit()

        connaddtable.close()
        return "OPERAÇÃO BEM SUCEDIDA, TABELA ADICIONADA COM SUCESSO."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -------------------------------------------------------------------
# DELETAR TABLES DO BANCO DE DADOS----------------------------------
# -------------------------------------------------------------------


def apagar_tabela():
    try:
        conndeltable = sqlite3.connect('AGENDA.DB')
        tabela_at = input("INFORME O NOME DA TABELA...")
        cursor = conndeltable.cursor()
        cursor.execute("DROP TABLE IF EXISTS" + tabela_at)
        conndeltable.commit()
        conndeltable.close()
        return "OPERAÇÃO BEM SUCEDIDA TABELA EXCLUIDA COM SUCESSO..."
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


def decisao_sair():
    try:
        print("\t:::DESEJA VOLTAR AO MENU PRINCIPAL? S OU N::::")
        voltar = str(input("$DIGITE A OPÇÃO DESEJADA$"))
        if voltar.lower() == 's' or voltar.lower() == 'sim':
            menu_principal()
        elif voltar.lower() == 'n' or voltar.lower() == 'nao':
            try:
                print("@@==$OPERAÇÃO FINALIZADA COM SUCESSO$==@@")
                sair = input("DESEJA SAIR DO SISTEMA?")
                if sair.lower() == 's' or sair.lower() == 'sim':
                    exit()
                elif sair.lower() == 'n' or sair.lower() == 'nao':
                    menu_principal()
                else:
                    print("\t@@==:$OPERAÇÃO FINALIZADA, ENTRADA DE DADOS ERRADA$:==@@")
                return "@@==:$OPERAÇÃO BEM SUCEDIDA$:==@@"
            except sqlite3.OperationalError as e:
                return f"Operação não sucedida. Erro: {str(e)}"
        else:
            print("@@==:$OPERAÇÃO FINALIZADA, ENTRADA DE DADOS ERRADA$:==@@")
            menu_principal()
        return "@@==:$OPERAÇÃO BEM SUCEDIDA$:==@@"
    except sqlite3.OperationalError as e:
        return f"Operação não sucedida. Erro: {str(e)}"


# -------------------------------------------------------------------
# NOTAS CRIAR, INSERIR E REFERENCIAR---------------------------------
# -------------------------------------------------------------------

# FIXME: REFENCIA ERRADA, A NOTA REFERENCIANDO NOTA, A NOTA DEVE REFERENCIAR UMA TABELA DIA DE SEMANA-------------
def adicionar_nota():
    # Criando uma tabela para notas se ela ainda não existir
    conn = sqlite3.connect("AGENDA.DB")

    nome_da_nota = str(input("INFORME O NOME DA NOTA"))

    sql_query = f'''CREATE TABLE IF NOT EXISTS {nome_da_nota}                 
                   (id INTEGER PRIMARY KEY AUTOINCREMENT,             
                   NOME TEXT NOT NULL,                                
                   CONTEUDO TEXT NOT NULL);'''

    conn.execute(sql_query)

    # Recebendo o nome da tabela por input
    tabela = input('Digite o nome da tabela a ser alterada: ').upper()

    # Adicionando a coluna NOTA_ID à tabela especificada
    conn.execute(f'''ALTER TABLE {tabela}                             
                    ADD COLUMN NOTA_ID INTEGER,                       
                    FOREIGN KEY (NOTA_ID) REFERENCES NOTA(id));''')

    print("Coluna NOTA_ID adicionada com sucesso à tabela ", tabela)


# ----------------------------------------------------------------------
# --------------------------- MENU PRINCIPAL ---------------------------
# ----------------------------------------------------------------------


def menu_principal():
    print("\t\t\t\t@====================================@")
    print("\t\t\t\t@==-BEM VINDO À SUA AGENDA ROZENDO-==@")
    print("\t\t\t\t@====================================@")

    # nesta variavel será decidido qual opção o usuario Rozendo irá usar

    print("\t\t\t@@@==== 1 - VER AGENDA ================@@@")
    print("\t\t\t@@@==== 2 - MODIFICAR AGENDA ==========@@@")
    print("\t\t\t@@@==== 3 - APAGAR DADOS DAS TABELAS ==@@@")
    print("\t\t\t@@@==== 4-  ADICIONAR COLUNAS =========@@@")
    print("\t\t\t@@@==== 5 - REMOVER COLUNAS ===========@@@")
    print("\t\t\t@@@==== 6-  ADICIONAR TABELAS =========@@@")
    print("\t\t\t@@@==== 7-  APAGAR TABELAS ============@@@")
    print("\t\t\t@@@==== 8-  ADICIONAR NOTAS ===========@@@")

    decisao = int(input("Oque deseja fazer?"))

    # VER AGENDA
    if decisao == 1:
        print("\t\t$ digite segunda para segunda feira              $")
        print("\t\t$ digite terça para terça feira                  $")
        print("\t\t$ digite quarta para quarta feira                $")
        print("\t\t$ digite quinta para quinta feira                $")
        print("\t\t$ digite sexta para sexta feira                  $")
        print("\t\t$ digite sabado para sabado                      $")
        print("\t\t$ digite outra tabela para acessar outra tabela  $")
        entrada = input('\t::-  DIGITE O DIA DA SEMANA QUE VOCÊ DESEJA VER  -::')
        while entrada != "exit":

            if entrada.lower() == 'segunda':
                print(verSEG())
                decisao_sair()
            elif entrada.lower() == 'terça':
                print(verTER())
                decisao_sair()
            elif entrada.lower() == "quarta":
                print(verQUA())
                decisao_sair()
            elif entrada.lower() == "quinta":
                print(verQUI())
                decisao_sair()
            elif entrada.lower() == "sexta":
                print(verSex())
                decisao_sair()
            elif entrada.lower() == "sabado":
                print(verSAB())
                decisao_sair()
            elif entrada == "exit":
                print("OBRIGADO POR USAR O SISTEMA DE GERENCIAMENTO DE AGENDA.")
                break
            # FIXME: PENSAR NA PROPOSTA DE INFORMAR A TABELA A SER ACESSADA
            # elif entrada == 'outra tabela':
            # outra_tabela = input("INFORME A OUTRA TABELA A SER ACESSADA")

            else:
                raise Exception("ENTRADA DE DADOS ERRADA, TERMINANDO SUA SESSÃO...")

    # MODIFICAR AGENDA- MODIFICAR POR INTEIRA
    elif decisao == 2:
        decisao_MOD = input("INFORME O DIA DA SEMANA PARA ALTERAR")
        while decisao_MOD != "exit":
            if decisao_MOD.lower() == 'segunda':
                updateSEG()
                decisao_sair()
            elif decisao_MOD.lower() == 'terca':
                updateTER()
                decisao_sair()
            elif decisao_MOD.lower() == 'quarta':
                updateQUA()
                decisao_sair()
            elif decisao_MOD.lower() == 'quinta':
                updateQUI()
                decisao_sair()
            elif decisao_MOD.lower() == 'sexta':
                updateSEX()
                decisao_sair()
            elif decisao_MOD.lower() == 'sabado':
                updateSAB()
                decisao_sair()
            elif decisao_MOD == 'exit':
                print("OBRIGADO POR USAR O SISTEMA DE GERENCIAMENTO DE AGENDA, FINALIZANDO...")
                break
            else:
                raise Exception("ENTRADA DE DADOS ERRADA, TERMINANDO A SESSÃO...")

    # APAGAR TODOS OS DADOS DA TABELA
    elif decisao == 3:
        print("\tBEM VINDO, ESTA OPÇÃO IRÁ APAGAR A TABELA COMPLETAMENTE")
        print("escreva o dia ou escreva -EXIT- para sair")
        decisao3 = input("INFORME -[]- ")

        while decisao3 != "EXIT":
            if decisao3.lower() == 'segunda':
                deletSEG()
                decisao_sair()
            elif decisao3.lower() == "terca":
                deletTER()
                decisao_sair()
            elif decisao3.lower() == "quarta":
                deletQUA()
                decisao_sair()
            elif decisao3.lower() == "quinta":
                deletQUI()
                decisao_sair()
            elif decisao3.lower() == "sexta":
                deletSEX()
                decisao_sair()
            elif decisao3.lower() == "sabado":
                deletSAB()
                decisao_sair()
            elif decisao3.lower() == "exit" or decisao3.lower() == "sair":
                print("$$OBRIGADO POR USAR O SISTEMA DE GERENCIAMENTO DE AGENDA$$")
                break
            else:
                raise Exception("@==DADOS INFORMADOS DE MANEIRA ERRADA==@")

    # ADICIONAR ITENS NA TABELA
    elif decisao == 4:
        print("\t BEM VINDO, ESTA OPÇÃO IRÁ ADICIONAR ITENS A TABELA QUE DESEJA-")
        adicionarCol()
        decisao_sair()
    # REMOVER COLUNAS
    elif decisao == 5:
        print("\t BEM VINDO, ESTA OPÇÃO IRÁ REMOVER COLUNAS DA SUA TABELA")
        apagar_coluna()
        decisao_sair()
    # ADICIONAR TABELA
    elif decisao == 6:
        print("\t BEM VINDO, ESTA OPÇÃO IRÁ ADICIONAR UMA TABELA NOVA AO SEU BDD")
        add_tabble()
        decisao_sair()
    elif decisao == 7:
        print("\t BEM VINDO, ESTA OPÇÃO IRÁ REMOVER A TABELA DESEJADA-")
        apagar_tabela()
        decisao_sair()
    elif decisao == 8:
        print("\t BEM VINDO, ESTÁ OPÇÃO IRA ADICIONAR UMA NOTA")
        adicionar_nota()
        decisao_sair()
    else:
        raise Exception("------------------ OPÇÃO INVALIDA -------------------------")


menu_principal()
